{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","_useState","useState","color","backgroundColor","_useState2","_slicedToArray","myStyle","setMyStyle","_useState3","_useState4","btnText","setBtnText","React","createElement","Fragment","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","onClick","Navbar","props","concat","mode","Link","to","title","aria-label","aria-current","aboutus","toggleMode","htmlFor","TextForm","text","setText","textarea","rows","value","onChange","event","console","log","target","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","split","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","BrowserRouter","body","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.b6da59ea.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\n\r\nexport default function About() {\r\n    const [myStyle,setMyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white',\r\n    });\r\n    const [btnText,setBtnText] = useState(\"Enable Dark Mode\");\r\n    \r\n    let toggleStyle = () =>{\r\n        if(myStyle.color==='black'){\r\n            setMyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black',\r\n            })\r\n            setBtnText(\"Enable Light Mode\");\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white',\r\n            })\r\n            setBtnText(\"Enable Dark Mode\");\r\n\r\n        }\r\n    }\r\n        \r\n   \r\n  return (\r\n   \r\n    <>\r\n    <div className=\"container my-3\" style={myStyle}>\r\n    <h1>About Us</h1>\r\n\r\n    <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n      <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<button className=\"btn btn-primary my-4 mx-3\" onClick={toggleStyle} type=\"submit\">{btnText}</button>\r\n</div>\r\n</>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n\r\n    {/* // <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}> */}\r\n    <div className=\"container-fluid\">\r\n      <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/about\">{props.aboutus}</Link>\r\n          </li>\r\n          {/* <li className=\"nav-item dropdown\">\r\n            <a className=\"nav-link dropdown-toggle\" href=\"/\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n              Dropdown\r\n            </a>\r\n            <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n              <li><a className=\"dropdown-item\" href=\"/\">Action</a></li>\r\n              <li><a className=\"dropdown-item\" href=\"/\">Another action</a></li>\r\n              <li><hr className=\"dropdown-divider\"/></li>\r\n              <li><a className=\"dropdown-item\" href=\"/\">Something else here</a></li>\r\n            </ul>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link disabled\" href=\"/\" tabindex=\"-1\" aria-disabled=\"true\">Disabled</a>\r\n          </li> */}\r\n          \r\n        </ul>\r\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n</div>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n  )\r\n}\r\nNavbar.propTypes ={\r\n    title: PropTypes.string,\r\n    aboutus: PropTypes.string\r\n}","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUp = ()=>{\r\n        console.log(\"Uppercase\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase!\", \"success\");\r\n\r\n    }\r\n    const handleLo = ()=>{\r\n      console.log(\"Uppercase\");\r\n      let newText = text.toLowerCase();\r\n      setText(newText);\r\n      props.showAlert(\"Converted to lowercase!\", \"success\");\r\n\r\n  }\r\n  const handleCopy = () => {\r\n    console.log(\"I am copy\");\r\n    var text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    text.setSelectionRange(0, 9999);\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n}\r\n    const handleCh = (event)=>{\r\n        console.log(\"on change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleClearClick = ()=>{ \r\n      let newText = '';\r\n      setText(newText)\r\n      props.showAlert(\"Text Cleared!\", \"success\");\r\n\r\n  }\r\n\r\n    const [text,setText] = useState('Enter Text Here');\r\n    // setText(\"New Text\");\r\n  return (\r\n    <>\r\n    <div>\r\n    <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}> \r\n    <h2>{props.textarea}</h2>\r\n    <div className=\"mb-3\">\r\n  {/* <label htmlFor=\"myBox\" className=\"form-label\">{props.textarea}</label> */}\r\n  <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value={text} onChange={handleCh} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'#042743'}}></textarea>\r\n</div>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleUp}>Convert to Uppercase</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleLo}>Convert to Lowercase</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy Text</button>\r\n<button className=\"btn btn-primary mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n\r\n    </div>\r\n    <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008 *  text.split(\" \").length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n        </div>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \r\n </div>\r\n  )\r\n}\r\n","import React, {useState} from 'react'\n\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar'\nimport TextForm from './components/TextForm'\nimport Alert from './components/Alert';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\n            \n\nfunction App() {\n  const [mode,setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n        setAlert(null);\n    }, 1500);\n}\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n\n    }\n  }\n  return (\n    <BrowserRouter>\n      <Navbar title=\"TextUtils\" aboutus=\"About Us\" mode={mode} toggleMode={toggleMode}/> \n      <Alert alert={alert}/>\n      <Routes>\n        <Route path=\"/about\" element={<About />} />\n        <Route path=\"/\" element={<TextForm showAlert={showAlert} textarea=\"Enter text to analysis\" mode={mode} />} />\n      </Routes>\n    </BrowserRouter>\n    \n  //  <Router>\n  //     <Navbar title=\"TextUtils\" aboutus=\"About Us\" mode={mode} toggleMode={toggleMode}/> \n  //     <Alert alert={alert}/>\n  //     <Routes>\n  //         <Route path=\"/about\">\n  //           <About />\n  //         </Route>\n          \n  //         <Route path=\"/\">\n  //             <TextForm showAlert={showAlert} textarea=\"Enter text to anlysis\" mode={mode}/>\n  //         </Route>\n  //       </Routes>\n\n  //       </Router>\n    \n      \n      \n\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}